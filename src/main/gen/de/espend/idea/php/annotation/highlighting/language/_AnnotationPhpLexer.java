/* The following code was generated by JFlex 1.7.0 tweaked for IntelliJ platform */

package de.espend.idea.php.annotation.highlighting.language;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static de.espend.idea.php.annotation.highlighting.language.psi.AnnotationPhpTypes.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>AnnotationPhpLexer.flex</tt>
 */
public class _AnnotationPhpLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ANNOTATION_CLASS_STATE = 2;
  public static final int ANNOTATION_CLASS_NAMESPACE_STATE = 4;
  public static final int ANNOTATION_SPLITTER_STATE = 6;
  public static final int ANNOTATION_BODY_STATE = 8;
  public static final int FIELD_ASSIGNMENT_STATE = 10;
  public static final int FIELD_ASSIGNMENT_VALUE_STATE = 12;
  public static final int CLASS_NAMESPACE_STATE = 14;
  public static final int CLASS_NAMESPACE_SPLITTER_STATE = 16;
  public static final int CLASS_STATE = 18;
  public static final int CONSTANT_STATE = 20;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [7, 7, 7]
   * Total runtime size is 1928 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>14]|((ch>>7)&0x7f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 68 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\103\200");

  /* The ZZ_CMAP_Y table has 256 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\53\2\1\3\22\2\1\4\37\2\1\3\237\2");

  /* The ZZ_CMAP_A table has 640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\4\1\22\0\1\2\1\0\1\5\4\0\1\3\1\13\1\14\1\7\1\0\1\15\3\0\12\6\1\11"+
    "\2\0\1\31\2\0\1\12\32\10\1\0\1\4\2\0\1\10\1\0\1\24\1\10\1\32\1\10\1\26\1\23"+
    "\5\10\1\22\1\10\1\20\3\10\1\30\1\25\1\27\1\21\5\10\1\16\1\0\1\17\7\0\1\1\32"+
    "\0\1\2\337\0\1\2\177\0\13\2\35\0\2\1\5\0\1\2\57\0\1\2\40\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\13\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\6\1\10\1\11\1\12\2\13\1\14\1\13\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\3\16"+
    "\1\25\1\26\1\27\2\30\1\31\2\30\1\32\1\33"+
    "\1\32\1\34\1\35\1\36\1\37\1\40\1\37\1\41"+
    "\2\42\2\0\1\43\3\0\3\16\1\31\3\0\1\44"+
    "\1\42\1\43\3\16\2\31\1\0\1\42\1\45\1\16"+
    "\1\46\2\47\1\42\1\50\1\51";

  private static int [] zzUnpackAction() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u0129\0\u0129\0\u015f"+
    "\0\u0129\0\u0129\0\u017a\0\u0129\0\u0129\0\u0195\0\u0129\0\u01b0"+
    "\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0129\0\u0129\0\u0129\0\u0129"+
    "\0\u0129\0\u0129\0\u0237\0\u0252\0\u026d\0\u0129\0\u0288\0\u0129"+
    "\0\u0129\0\u01b0\0\u02a3\0\u01e6\0\u02be\0\u0129\0\u0129\0\u02d9"+
    "\0\u0129\0\u0129\0\u02f4\0\u0129\0\u030f\0\u032a\0\u0129\0\u0345"+
    "\0\u0360\0\u017a\0\u01b0\0\u0129\0\u037b\0\u01e6\0\u0396\0\u03b1"+
    "\0\u03cc\0\u03e7\0\u0402\0\u02be\0\u041d\0\u02d9\0\u0129\0\u0438"+
    "\0\u01e6\0\u0453\0\u046e\0\u0489\0\u04a4\0\u04bf\0\u04da\0\u04f5"+
    "\0\u021c\0\u0510\0\u021c\0\u052b\0\u0546\0\u0561\0\u021c\0\u0345";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\14\2\15\4\14\1\16\2\14\1\17\21\14\2\15"+
    "\4\14\1\16\1\20\1\14\1\17\5\14\11\20\1\14"+
    "\1\20\1\21\2\15\1\21\1\22\3\21\1\23\7\21"+
    "\11\23\1\21\1\23\1\24\2\15\1\24\1\25\3\24"+
    "\1\26\7\24\11\26\1\24\1\26\1\27\2\15\1\30"+
    "\1\31\1\32\1\33\1\16\1\34\1\35\1\17\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\2\34\1\44\3\34"+
    "\1\45\1\34\1\27\1\34\1\46\2\15\4\46\1\16"+
    "\1\47\1\46\1\17\2\46\1\40\2\46\11\47\1\50"+
    "\1\47\1\51\2\15\1\52\1\53\1\54\1\55\1\16"+
    "\1\53\1\51\1\17\5\51\11\53\1\51\1\53\1\56"+
    "\2\15\1\56\1\57\2\56\1\16\1\60\1\56\1\17"+
    "\5\56\11\60\1\56\1\60\1\61\2\15\1\61\1\62"+
    "\2\61\1\16\1\63\1\61\1\17\5\61\11\63\1\61"+
    "\1\63\1\64\2\15\4\64\1\16\1\65\1\66\1\17"+
    "\5\64\11\65\1\64\1\65\1\67\2\15\1\67\1\70"+
    "\2\67\1\16\1\70\1\67\1\17\5\67\11\70\1\67"+
    "\1\71\34\0\2\15\36\0\1\20\1\0\1\20\7\0"+
    "\11\20\1\0\1\20\4\0\1\22\1\0\1\72\1\0"+
    "\1\72\7\0\11\72\1\0\1\72\6\0\1\26\1\0"+
    "\1\26\7\0\11\26\1\0\1\26\3\73\1\74\1\75"+
    "\26\73\4\0\1\31\1\0\1\31\1\0\2\31\6\0"+
    "\11\31\1\0\1\31\4\76\1\77\1\74\25\76\6\0"+
    "\1\33\30\0\1\31\1\0\1\34\1\0\1\34\1\31"+
    "\6\0\11\34\1\0\1\34\4\0\1\31\1\0\1\34"+
    "\1\0\1\34\1\31\6\0\1\34\1\100\7\34\1\0"+
    "\1\34\4\0\1\31\1\0\1\34\1\0\1\34\1\31"+
    "\6\0\4\34\1\101\4\34\1\0\1\34\4\0\1\31"+
    "\1\0\1\34\1\0\1\34\1\31\6\0\10\34\1\102"+
    "\1\0\1\34\6\0\1\47\1\0\1\47\7\0\11\47"+
    "\1\0\1\47\4\0\1\53\1\0\1\53\1\0\1\53"+
    "\1\103\6\0\11\53\1\0\1\53\4\0\1\104\1\0"+
    "\1\104\1\0\1\104\1\105\6\0\11\104\1\0\1\104"+
    "\4\0\1\57\1\0\1\106\1\0\1\106\7\0\11\106"+
    "\1\0\1\106\6\0\1\63\1\0\1\63\7\0\11\63"+
    "\1\0\1\63\6\0\1\65\1\0\1\65\7\0\11\65"+
    "\1\0\1\65\11\0\1\107\25\0\1\70\1\0\1\70"+
    "\1\0\2\70\6\0\11\70\1\0\1\70\4\0\1\70"+
    "\1\0\1\70\1\0\2\70\6\0\2\70\1\110\6\70"+
    "\1\0\1\70\1\73\1\0\31\73\4\76\1\77\1\111"+
    "\25\76\4\0\1\31\1\0\1\34\1\0\1\34\1\31"+
    "\6\0\2\34\1\112\6\34\1\0\1\34\4\0\1\31"+
    "\1\0\1\34\1\0\1\34\1\31\6\0\2\34\1\113"+
    "\6\34\1\0\1\34\4\0\1\31\1\0\1\34\1\0"+
    "\1\34\1\31\6\0\1\34\1\114\7\34\1\0\1\34"+
    "\4\0\1\115\1\0\1\115\1\0\1\115\1\116\6\0"+
    "\11\115\1\0\1\115\11\0\1\117\25\0\1\70\1\0"+
    "\1\70\1\0\2\70\6\0\4\70\1\120\4\70\1\0"+
    "\1\70\4\0\1\31\1\0\1\34\1\0\1\34\1\31"+
    "\6\0\2\34\1\121\6\34\1\0\1\34\4\0\1\31"+
    "\1\0\1\34\1\0\1\34\1\31\6\0\5\34\1\122"+
    "\3\34\1\0\1\34\4\0\1\31\1\0\1\34\1\0"+
    "\1\34\1\31\6\0\6\34\1\123\2\34\1\0\1\34"+
    "\4\0\1\115\1\0\1\115\1\0\2\115\6\0\11\115"+
    "\1\0\1\115\4\0\1\115\1\0\1\115\1\0\1\124"+
    "\1\115\6\0\11\124\1\0\1\124\10\0\1\125\7\0"+
    "\11\125\1\0\1\125\4\0\1\70\1\0\1\70\1\0"+
    "\2\70\6\0\5\70\1\126\3\70\1\0\1\70\4\0"+
    "\1\31\1\0\1\34\1\0\1\34\1\31\6\0\6\34"+
    "\1\127\2\34\1\0\1\34\4\0\1\115\1\0\1\124"+
    "\1\0\1\124\1\115\6\0\11\124\1\0\1\124\6\0"+
    "\1\125\1\0\1\125\7\0\11\125\1\0\1\125\4\0"+
    "\1\70\1\0\1\70\1\0\2\70\6\0\5\70\1\130"+
    "\3\70\1\0\1\70";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1404];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\13\0\1\11\1\1\2\11\1\1\2\11\1\1\2\11"+
    "\1\1\1\11\5\1\6\11\3\1\1\11\1\1\2\11"+
    "\4\1\2\11\1\1\2\11\1\1\1\11\2\1\1\11"+
    "\2\1\2\0\1\11\3\0\4\1\3\0\1\11\7\1"+
    "\1\0\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[88];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  public _AnnotationPhpLexer() {
    this((java.io.Reader)null);
  }

  public int nesting = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AnnotationPhpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return SURROUNDING_CODE;
            } 
            // fall through
          case 42: break;
          case 2: 
            { return WHITE_SPACE;
            } 
            // fall through
          case 43: break;
          case 3: 
            { return DOC_BLOCK_LEADING_ASTERISK;
            } 
            // fall through
          case 44: break;
          case 4: 
            { yybegin(ANNOTATION_CLASS_NAMESPACE_STATE); return ANNOTATION_AT;
            } 
            // fall through
          case 45: break;
          case 5: 
            { yybegin(ANNOTATION_BODY_STATE); return ANNOTATION_CLASS;
            } 
            // fall through
          case 46: break;
          case 6: 
            { yybegin(ANNOTATION_CLASS_STATE);
            } 
            // fall through
          case 47: break;
          case 7: 
            { yypushback(yytext().length()); yybegin(ANNOTATION_SPLITTER_STATE);
            } 
            // fall through
          case 48: break;
          case 8: 
            { yybegin(ANNOTATION_CLASS_NAMESPACE_STATE);
            } 
            // fall through
          case 49: break;
          case 9: 
            { yybegin(ANNOTATION_CLASS_NAMESPACE_STATE); return ANNOTATION_NAMESPACE_OPERATOR;
            } 
            // fall through
          case 50: break;
          case 10: 
            { return ANNOTATION_NAMESPACE_NAME;
            } 
            // fall through
          case 51: break;
          case 11: 
            { if (nesting > 0) return BAD_CHARACTER; yybegin(YYINITIAL);
            } 
            // fall through
          case 52: break;
          case 12: 
            { if (nesting > 0) return IDENTIFIER;
            } 
            // fall through
          case 53: break;
          case 13: 
            { if (nesting > 0) return NUMBER;
            } 
            // fall through
          case 54: break;
          case 14: 
            { if (nesting > 0) { yypushback(yytext().length()); yybegin(FIELD_ASSIGNMENT_STATE); }
            } 
            // fall through
          case 55: break;
          case 15: 
            { if (nesting > 0) return KEY_VALUE_ASSIGN;
            } 
            // fall through
          case 56: break;
          case 16: 
            { nesting++; return LPARANTHESES_CLASS_BODY;
            } 
            // fall through
          case 57: break;
          case 17: 
            { if (nesting > 0) {
              nesting--;
          }
          if (nesting == 0) {
              yybegin(YYINITIAL);
          }
          return RPARANTHESES_CLASS_BODY;
            } 
            // fall through
          case 58: break;
          case 18: 
            { if (nesting > 0) return COMMA;
            } 
            // fall through
          case 59: break;
          case 19: 
            { if (nesting > 0) return LBRACES;
            } 
            // fall through
          case 60: break;
          case 20: 
            { if (nesting > 0) return RBRACES;
            } 
            // fall through
          case 61: break;
          case 21: 
            { if (nesting > 0) yypushback(yytext().length()); yybegin(ANNOTATION_BODY_STATE);
            } 
            // fall through
          case 62: break;
          case 22: 
            { if (nesting > 0) return CLASS_FIELD;
            } 
            // fall through
          case 63: break;
          case 23: 
            { if (nesting > 0) yybegin(FIELD_ASSIGNMENT_VALUE_STATE); return EQUAL_OPERATOR;
            } 
            // fall through
          case 64: break;
          case 24: 
            { if (nesting > 0) yypushback(yytext().length()); yybegin(FIELD_ASSIGNMENT_STATE);
            } 
            // fall through
          case 65: break;
          case 25: 
            { if (nesting > 0) yybegin(FIELD_ASSIGNMENT_STATE); return IDENTIFIER;
            } 
            // fall through
          case 66: break;
          case 26: 
            { yybegin(CLASS_STATE);
            } 
            // fall through
          case 67: break;
          case 27: 
            { yypushback(yytext().length()); yybegin(CLASS_NAMESPACE_SPLITTER_STATE);
            } 
            // fall through
          case 68: break;
          case 28: 
            { yybegin(CLASS_NAMESPACE_STATE);
            } 
            // fall through
          case 69: break;
          case 29: 
            { yybegin(CLASS_NAMESPACE_STATE); return CLASS_NAMESPACE_OPERATOR;
            } 
            // fall through
          case 70: break;
          case 30: 
            { return CLASS_NAMESPACE_NAME;
            } 
            // fall through
          case 71: break;
          case 31: 
            { if (nesting > 0) yypushback(yytext().length()); yybegin(FIELD_ASSIGNMENT_VALUE_STATE);
            } 
            // fall through
          case 72: break;
          case 32: 
            { if (nesting > 0) return CLASS;
            } 
            // fall through
          case 73: break;
          case 33: 
            { if (nesting > 0) yypushback(yytext().length()); yybegin(CLASS_STATE);
            } 
            // fall through
          case 74: break;
          case 34: 
            { if (nesting > 0) return CONSTANT;
            } 
            // fall through
          case 75: break;
          case 35: 
            { if (nesting > 0) return STRING;
            } 
            // fall through
          case 76: break;
          case 36: 
            { if (nesting > 0) yybegin(CONSTANT_STATE); return STATIC_ACCESS_OPERATOR;
            } 
            // fall through
          case 77: break;
          case 37: 
            { if (nesting > 0) return NULL_KEYWORD;
            } 
            // fall through
          case 78: break;
          case 38: 
            { if (nesting > 0) return BOOL_TRUE_KEYWORD;
            } 
            // fall through
          case 79: break;
          case 39: 
            { if (nesting > 0) yypushback(yytext().length()); yybegin(CLASS_NAMESPACE_STATE);
            } 
            // fall through
          case 80: break;
          case 40: 
            { if (nesting > 0) return BOOL_FALSE_KEYWORD;
            } 
            // fall through
          case 81: break;
          case 41: 
            { if (nesting > 0) return CLASS_KEYWORD;
            } 
            // fall through
          case 82: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
